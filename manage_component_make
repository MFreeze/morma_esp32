#!/bin/bash

CURRENT_DIRECTORY=$(pwd)

if [ ${0#/} == $0 ]; then
    # We have relative path here
    SCRIPT_LOCATION=${0%/*}
    GIT_ROOT_DIR="${CURRENT_DIRECTORY}/${SCRIPT_LOCATION}"
else
    GIT_ROOT_DIR=${0%/*}
fi

RESOURCE_DIR=${GIT_ROOT_DIR}/resources
COMPONENT_DIR=${GIT_ROOT_DIR}/components

# Component that only need a generic component.mk (ie sources are at the root of the directory)
COMPONENTS_DEFAULT_MK=(Adafruit_BME280_Library Adafruit-GFX-Library Adafruit_Sensor OneWire NTPClient WIFIMANAGER-ESP32)
DEFAULT_MK_NAME=generic_component.mk

# Component that require generic src_component.mk (ie sources are packed in src directory)
COMPONENTS_SRC_MK=(PageBuilder LOLIN_EPD_Library) 
SRC_MK_NAME=generic_src_component.mk

# Other components with specific component.mk
# Don't use hashed array for retrocompatibility with bash3 (OS X...)
COMPONENTS_OTHER_MK_KEYS=(AutoConnect Influx-Arduino)
COMPONENTS_OTHER_MK_FILES=(autoconnect_component.mk influxarduino_component.mk)

MK_FILE=${DEFAULT_MK_NAME}
for i in ${COMPONENTS_DEFAULT_MK[@]}; do
    if [ ! -e ${COMPONENT_DIR}/${i}/component.mk ]; then
        echo "Creating link to ${RESOURCE_DIR}/${MK_FILE} in ${COMPONENT_DIR}/${i}"
        ln -s ${RESOURCE_DIR}/${MK_FILE} ${COMPONENT_DIR}/${i}/component.mk
    elif [[ $(readlink ${COMPONENT_DIR}/${i}/component.mk) != ${RESOURCE_DIR}/${MK_FILE} ]]; then
        echo "Outdated component.mk in ${COMPONENT_DIR}/${i}. Update to ${RESOURCE_DIR}/${MK_FILE}"
        ln -f -s ${RESOURCE_DIR}/${MK_FILE} ${COMPONENT_DIR}/${i}/component.mk
    fi
done

MK_FILE=${SRC_MK_NAME}
for i in ${COMPONENTS_SRC_MK[@]}; do
    if [ ! -e ${COMPONENT_DIR}/${i}/component.mk ]; then
        echo "Creating link to ${RESOURCE_DIR}/${MK_FILE} in ${COMPONENT_DIR}/${i}"
        ln -s ${RESOURCE_DIR}/${MK_FILE} ${COMPONENT_DIR}/${i}/component.mk
    elif [[ $(readlink ${COMPONENT_DIR}/${i}/component.mk) != ${RESOURCE_DIR}/${MK_FILE} ]]; then
        echo "Outdated component.mk in ${COMPONENT_DIR}/${i}. Update to ${RESOURCE_DIR}/${MK_FILE}"
        ln -f -s ${RESOURCE_DIR}/${MK_FILE} ${COMPONENT_DIR}/${i}/component.mk
    fi
done

for i in $(seq 0 $(( ${#COMPONENTS_OTHER_MK_KEYS[@]} - 1 )) ); do
    COMPONENT=${COMPONENTS_OTHER_MK_KEYS[$i]}
    MK_FILE=${COMPONENTS_OTHER_MK_FILES[$i]}
    if [ ! -e ${COMPONENT_DIR}/${COMPONENT}/component.mk ]; then
        echo "Creating link to ${RESOURCE_DIR}/${MK_FILE} in ${COMPONENT_DIR}/${COMPONENT}"
        ln -s ${RESOURCE_DIR}/${MK_FILE} ${COMPONENT_DIR}/${COMPONENT}/component.mk
    elif [[ $(readlink ${COMPONENT_DIR}/${COMPONENT}/component.mk) != ${RESOURCE_DIR}/${MK_FILE} ]]; then
        echo "Outdated component.mk in ${COMPONENT_DIR}/${COMPONENT}. Update to ${RESOURCE_DIR}/${MK_FILE}"
        ln -f -s ${RESOURCE_DIR}/${MK_FILE} ${COMPONENT_DIR}/${COMPONENT}/component.mk
    fi
done

